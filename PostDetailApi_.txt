PostDetailApi

import axios from "axios";
import type { Comment } from "../type";
import type { Post, BackendPostResponse } from "../types/PostType";
import { getToken } from "../auth";

const BASE_URL = import.meta.env.VITE_API_URL;

// ---------------- Post Detail ----------------
export const getPostDetail = async (id: number): Promise<Post> => {
  const response = await axios.get<BackendPostResponse>(`${BASE_URL}/posts/detail/${id}`);
  const backendPost = response.data;

  return {
    id: backendPost.postId,
    title: backendPost.title,
    nickname: backendPost.user.userNickname,
    image: backendPost.url,
    category: backendPost.categoryId,
    createdAt: backendPost.createdAt,
    updatedAt: backendPost.updatedAt,
    views: backendPost.views,
    hashtags: backendPost.hashtags,
    likes: backendPost.likesCount,
    content: backendPost.content,
    files: backendPost.files,
  };
};

// ---------------- Comments ----------------
export const getCommentsByPostId = async (postId: number): Promise<Comment[]> => {
  const response = await axios.get(`${BASE_URL}/posts/${postId}/comments`);
  return response.data;
};

interface AddCommentPayload {
  content: string;
  postId: number;
  parentCommentId?: number;
}

export const addComment = async (payload: AddCommentPayload): Promise<Comment> => {
  const token = getToken();
  if (!token) throw new Error("Authentication token not found.");

  const response = await axios.post(`${BASE_URL}/comments`, payload, {
    headers: { Authorization: `Bearer ${token}` },
  });
  return response.data;
};

export const deleteComment = async (commentId: number): Promise<void> => {
  const token = getToken();
  if (!token) throw new Error("Authentication token not found.");

  await axios.delete(`${BASE_URL}/comments/${commentId}`, {
    headers: { Authorization: `Bearer ${token}` },
  });
};

export const updateComment = async (commentId: number, content: string): Promise<Comment> => {
  const token = getToken();
  if (!token) throw new Error("Authentication token not found.");

  const response = await axios.put(`${BASE_URL}/comments/${commentId}`, { content }, {
    headers: { Authorization: `Bearer ${token}` },
  });
  return response.data;
};

// ---------------- Post Likes ----------------
export const likePost = async (postId: number): Promise<void> => {
  const token = getToken();
  if (!token) throw new Error("Authentication token not found.");

  await axios.post(`${BASE_URL}/posts/${postId}/like`, {}, {
    headers: { Authorization: `Bearer ${token}` },
  });
};

export const unlikePost = async (postId: number): Promise<void> => {
  const token = getToken();
  if (!token) throw new Error("Authentication token not found.");

  await axios.delete(`${BASE_URL}/posts/${postId}/like`, {
    headers: { Authorization: `Bearer ${token}` },
  });
};

export const getPostLikeStatus = async (postId: number): Promise<boolean> => {
  const token = getToken();
  if (!token) throw new Error("Authentication token not found.");

  try {
    const response = await axios.get(`${BASE_URL}/posts/${postId}/like/status`, {
      headers: { Authorization: `Bearer ${token}` },
    });
    return response.data;
  } catch (err) {
    if (axios.isAxiosError(err) && err.response?.status === 404) return false;
    throw err;
  }
};

export const getPostLikesCount = async (postId: number): Promise<number> => {
  const token = getToken();
  if (!token) throw new Error("Authentication token not found.");

  const response = await axios.get(`${BASE_URL}/posts/${postId}/likes/count`, {
    headers: { Authorization: `Bearer ${token}` },
  });
  return response.data.count;
};

// ---------------- Update Post ----------------
export const updatePost = async (postId: number, updatedPost: Post): Promise<Post> => {
  const token = getToken();
  if (!token) throw new Error("Authentication token not found.");

  try {
    const formData = new FormData();

    // 문자열 데이터 추가
    formData.append("title", updatedPost.title);
    formData.append("content", updatedPost.content);

    // 해시태그 배열 → JSON 문자열로 변환해서 전송
    if (updatedPost.hashtags) {
      formData.append("hashtags", JSON.stringify(updatedPost.hashtags));
    }

    // 파일 데이터 처리
    if (updatedPost.files) {
      updatedPost.files.forEach((fileObj: any) => {
        if (fileObj.file) {
          // 새로 업로드한 파일
          formData.append("files", fileObj.file);
        } else {
          // 기존 파일 유지
          formData.append("existingFiles", JSON.stringify(fileObj));
        }
      });
    }

    const response = await axios.put<Post>(`${BASE_URL}/posts/${postId}`, formData, {
      headers: {
        "Content-Type": "multipart/form-data",
        Authorization: `Bearer ${token}`,
      },
    });

    return response.data;
  } catch (error) {
    console.error("API Error updating post:", error);
    throw error;
  }
};


Login.tsx 

// (생략: imports는 기존과 동일)
import { useState } from "react";
import { useNavigate } from "react-router-dom";
import { TextField, Button, Stack, Typography, Box } from "@mui/material";
import { useAuthStore } from "../authStore";
import axios from "axios"; // <- axios 전역헤더에 토큰 등록하려면 import 필요

const BASE_URL = import.meta.env.VITE_API_URL;

const Login = () => {
  const [form, setForm] = useState({ email: "", password: "" });
  const navigate = useNavigate();
  const login = useAuthStore((state) => state.login);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setForm({ ...form, [e.target.name]: e.target.value });
  };

  // 토큰을 정규화해서 순수 JWT만 반환
  const normalizeToken = (raw: string | null | undefined) => {
    if (!raw) return null;
    let t = raw.trim();

    // 예: "jwt , Bearer eyJ..." 형태라면 콤마로 분리해서 마지막 부분 취함
    if (t.includes(",")) {
      const parts = t.split(",");
      t = parts[parts.length - 1].trim();
    }

    // "Bearer eyJ..."이면 접두사 제거
    if (t.startsWith("Bearer ")) {
      t = t.substring(7).trim();
    }

    // 혹시 "jwt " 같은 불필요 접두어가 붙어있는 경우 제거 (예비 처리)
    if (t.toLowerCase().startsWith("jwt ")) {
      t = t.substring(4).trim();
    }

    // 간단 검증: JWT는 마침표(.)가 2개 있어야 함
    if ((t.match(/\./g) || []).length !== 2) {
      console.warn("정규화된 토큰이 JWT 형식이 아닙니다:", t);
      // 그래도 반환하되 개발자에게 로그 남김
    }

    return t;
  };

  const handleSubmit = async () => {
    try {
      const res = await fetch(`${BASE_URL}/users/login`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(form),
      });

      if (!res.ok) {
        if (res.status === 401) {
          alert("이메일 또는 비밀번호가 잘못되었습니다.");
          return;
        }
        if (res.status === 500) {
          alert("서버 오류입니다. 잠시 후 다시 시도해주세요.");
          return;
        }
        const msg = await res.text();
        alert(msg);
        return;
      }

      // 성공 응답
      const contentType = res.headers.get("Content-Type");
      if (contentType?.includes("application/json")) {
        const data = await res.json();
        console.log("✅ 로그인 응답:", data);

        const nickname = data.nickname;
        // 서버가 반환한 토큰 위치(예: data.token)와 응답 header Authorization 둘 다 확인
        let rawToken = data.token ?? data.jwt ?? data.accessToken ?? res.headers.get("Authorization") ?? null;

        const token = normalizeToken(rawToken);
        if (token) {
          // sessionStorage에 'token'으로 저장 (일관성 유지)
          sessionStorage.setItem("token", token);
          // 과거에 잘못 저장된 키가 있으면 덮어쓰기 (옵션)
          sessionStorage.removeItem("jwt");

          // axios 전역 헤더에 등록 (axios를 사용하는 모든 요청에 자동 추가)
          axios.defaults.headers.common.Authorization = `Bearer ${token}`;

          console.log("저장된 토큰 (길이):", token.length);
        } else {
          console.warn("로그인에 토큰이 포함되어 있지 않거나 정규화 실패", rawToken);
        }

        const isAdmin = data.role === "ADMIN";
        if (nickname) {
          login(nickname, isAdmin);
        }

        alert("로그인 성공!");
        navigate("/");
      } else {
        console.warn("JSON 응답이 아님:", contentType);
        const text = await res.text();
        alert(text);
      }
    } catch (err) {
      console.error("로그인 에러:", err);
      alert("로그인 요청 실패");
    }
  };

  return (
    <Box sx={{ height: "100vh", display: "flex", justifyContent: "center", alignItems: "center" }}>
      <Stack spacing={2} width={330}>
        <Typography variant="h4" align="center" sx={{ fontWeight: "bold" }}>
          로그인
        </Typography>
        <Typography align="center">HYJW 멤버 커뮤니티에 오신 것을 환영합니다.</Typography>

        <TextField label="이메일" name="email" value={form.email} onChange={handleChange} />
        <TextField label="비밀번호" name="password" type="password" value={form.password} onChange={handleChange} />

        <Button
          variant="contained"
          onClick={handleSubmit}
          sx={{
            backgroundColor: "#474747",
            "&:hover": { backgroundColor: "#333" },
            padding: "10px 20px",
            fontSize: "1.25rem",
            fontWeight: "bold",
            borderRadius: "8px",
            width: "100%",
            maxWidth: "400px",
          }}
        >
          로그인
        </Button>

        <Typography variant="body2" align="center">
          아직 HaYeJiWoo Member가 아니신가요?{" "}
          <span style={{ color: "#0961baff", cursor: "pointer", textDecoration: "underline" }} onClick={() => navigate("/signup")}>
            회원가입
          </span>
        </Typography>
      </Stack>
    </Box>
  );
};

export default Login;

